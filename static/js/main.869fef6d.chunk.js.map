{"version":3,"sources":["Card.js","CardList.js","App.js","index.js"],"names":["Card","card","useState","flip","setFlip","height","setHeight","question_","useRef","answer_","MaxHeight","questionHeight","current","getBoundingClientRect","answerHeight","Math","max","useEffect","question","answer","options","window","addEventListener","removeEventListener","className","style","onClick","ref","map","option","CardList","cards","id","App","setcards","categories","setCategories","category_","amount_","decodeString","str","textArea","document","createElement","innerHTML","value","axios","get","then","res","data","trivia_categories","onSubmit","e","preventDefault","params","amount","category","results","questionItem","index","correct_answer","incorrect_answers","a","Date","now","sort","random","htmlFor","name","type","min","step","defaultValue","ReactDOM","render","StrictMode","getElementById"],"mappings":"oNAGe,SAASA,EAAT,GAAyB,IAATC,EAAQ,EAARA,KAAQ,EAEbC,oBAAS,GAFI,mBAE9BC,EAF8B,KAExBC,EAFwB,OAGTF,mBAAS,KAHA,mBAG9BG,EAH8B,KAGtBC,EAHsB,KAK/BC,EAAYC,mBACZC,EAAUD,mBAEhB,SAASE,IACP,IAAMC,EAAiBJ,EAAUK,QAAQC,wBAAwBR,OAC3DS,EAAeL,EAAQG,QAAQC,wBAAwBR,OAC7DC,EAAUS,KAAKC,IAAIL,EAAgBG,EAAc,MAUnD,OANAG,oBAAUP,EAAW,CAACT,EAAKiB,SAAUjB,EAAKkB,OAAQlB,EAAKmB,UACvDH,qBAAU,WAER,OADAI,OAAOC,iBAAiB,SAAUZ,GAC3B,kBAAMW,OAAOE,oBAAoB,SAAUb,MACjD,IAGD,sBACEc,UAAS,eAAUrB,EAAO,OAAS,IACnCsB,MAAO,CAAEpB,OAAQA,GACjBqB,QAAS,kBAAMtB,GAASD,IAH1B,UAME,sBAAKqB,UAAU,WAAWG,IAAKpB,EAA/B,UACGN,EAAKiB,SACN,qBAAKM,UAAU,eAAf,SACGvB,EAAKmB,QAAQQ,KAAI,SAAAC,GAChB,OAAO,qBAAKL,UAAU,cAAf,SAA2CK,GAATA,WAK/C,qBAAKL,UAAU,SAASG,IAAKlB,EAA7B,SAAuCR,EAAKkB,YCrCnC,SAASW,EAAT,GAA8B,IAAVC,EAAS,EAATA,MACjC,OAEE,aADA,CACA,OAAKP,UAAU,UAAf,SACGO,EAAMH,KAAI,SAAA3B,GAET,OAAO,cAACD,EAAD,CAAMC,KAAMA,GAAWA,EAAK+B,S,0BC+E5BC,MAlFf,WAAgB,IAAD,EACa/B,mBAAS,IADtB,mBACN6B,EADM,KACCG,EADD,OAEuBhC,mBAAS,IAFhC,mBAENiC,EAFM,KAEMC,EAFN,KAIPC,EAAY7B,mBACZ8B,EAAU9B,mBAchB,SAAS+B,EAAaC,GACpB,IAAMC,EAAWC,SAASC,cAAc,YAExC,OADAF,EAASG,UAAWJ,EACbC,EAASI,MA8BlB,OA5CA5B,qBAAU,WACR6B,IAAMC,IAAI,wCACPC,MAAK,SAAAC,GACJb,EAAca,EAAIC,KAAKC,wBAE1B,IAEHlC,qBAAU,cAEP,IAoCD,qCAEE,uBAAMO,UAAU,SAAS4B,SA9B7B,SAAsBC,GACpBA,EAAEC,iBACFR,IACCC,IAAI,8BAA+B,CAClCQ,OAAQ,CACNC,OAAQlB,EAAQ1B,QAAQiC,MACxBY,SAAUpB,EAAUzB,QAAQiC,SAG/BG,MAAK,SAAAC,GAEJf,EAASe,EAAIC,KAAKQ,QAAQ9B,KAAI,SAAC+B,EAAcC,GAC3C,IAAMzC,EAASoB,EAAaoB,EAAaE,gBACnCzC,EAAO,sBACRuC,EAAaG,kBAAkBlC,KAAI,SAAAmC,GAAC,OAAIxB,EAAawB,OAD7C,CAEX5C,IAEF,MAAO,CACLa,GAAG,GAAD,OAAK4B,EAAL,YAAcI,KAAKC,OACrB/C,SAAUqB,EAAaoB,EAAazC,UACpCC,OAAQA,EACRC,QAASA,EAAQ8C,MAAK,kBAAMnD,KAAKoD,SAAW,eAShD,UACE,sBAAK3C,UAAU,aAAf,UACE,uBAAO4C,QAAQ,WAAf,qBAEA,wBAAQpC,GAAG,WAAWL,IAAKU,EAA3B,SACGF,EAAWP,KAAI,SAAA6B,GACd,OAAO,wBAAQZ,MAAOY,EAASzB,GAAxB,SAA+CyB,EAASY,MAAvBZ,EAASzB,YAIvD,sBAAKR,UAAU,aAAf,UAEE,uBAAO4C,QAAQ,SAAf,iCACA,uBAAOE,KAAK,SAAStC,GAAG,SAASuC,IAAI,IAAIC,KAAK,IAAIC,aAAc,GAAI9C,IAAKW,OAE3E,qBAAKd,UAAU,aAAf,SAEE,wBAAQA,UAAU,MAAlB,2BAGA,qBAAKA,UAAU,YAAf,SACF,cAACM,EAAD,CAAUC,MAAOA,UC7EzB2C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlC,SAASmC,eAAe,W","file":"static/js/main.869fef6d.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react'\n\n//card component\nexport default function Card({ card }) {\n  //handle our flipping animation + set default to false\n  const [flip, setFlip] = useState(false)\n  const [height, setHeight] = useState('0')\n//know current front and back of the  card element\n  const question_ = useRef()\n  const answer_ = useRef()\n//calculate the max height of container\n  function MaxHeight() {\n    const questionHeight = question_.current.getBoundingClientRect().height //get height of font/question element\n    const answerHeight = answer_.current.getBoundingClientRect().height //get height of back/answer element\n    setHeight(Math.max(questionHeight, answerHeight, 100))//get largest values\n  }\n\n  //whenever a question or answers gets longer or shorter, recalculate the height\n  useEffect(MaxHeight, [card.question, card.answer, card.options])\n  useEffect(() => {\n    window.addEventListener('resize', MaxHeight)//everytime the window is resized call function\n    return () => window.removeEventListener('resize', MaxHeight)\n  }, [])\n\n  return (\n    <div\n      className={`card ${flip ? 'flip' : ''}`}//if flip is true set a class of flip otherwise class=default/blank\n      style={{ height: height }}//set height equal to height variable\n      onClick={() => setFlip(!flip)}//whenever the click event takes place the current flip is set = to not flip;\n    >\n      \n      <div className=\"question\" ref={question_}>\n        {card.question}\n        <div className=\"card-options\">\n          {card.options.map(option => {\n            return <div className=\"card-option\" key={option}>{option}</div>\n          })}\n          \n        </div>\n      </div>\n      <div className=\"answer\" ref={answer_}>{card.answer}</div>\n    </div>\n  )\n}\n","import React from 'react';\nimport Card from './Card';\n\nexport default function CardList({ cards }) {\n  return (\n    //grid styling so that the app can be responsive no matter the screen size\n    <div className=\"my-grid\">\n      {cards.map(card => {\n        //return card component only re renders unique elements\n        return <Card card={card} key={card.id} />\n      })}\n    </div>\n  )\n}\n\n","import React, { useState, useEffect, useRef } from 'react';\nimport CardList from './CardList';\nimport './App.css'\n//import axios to make calling api easier\nimport axios from 'axios'\n\nfunction App() {\n  const [cards, setcards] = useState([])\n  const [categories, setCategories] = useState([])\n\n  const category_ = useRef()\n  const amount_ = useRef()\n\n\n  useEffect(() => {\n    axios.get('https://opentdb.com/api_category.php')//generates all the different subjects\n      .then(res => {\n        setCategories(res.data.trivia_categories)//call set\n      })\n  }, [])\n\n  useEffect(() => {\n   \n  }, [])\n//get rid of jibberish characters from the html components\n  function decodeString(str) {\n    const textArea = document.createElement('textarea')\n    textArea.innerHTML= str\n    return textArea.value//converts html to string\n  }\n//happens as soon as component mounts\n  function handleSubmit(e) {\n    e.preventDefault()//make sure code goes through this react code\n    axios\n    .get('https://opentdb.com/api.php', {\n      params: {\n        amount: amount_.current.value,\n        category: category_.current.value\n      }\n    })\n    .then(res => {\n      //return array of all the flashcards\n      setcards(res.data.results.map((questionItem, index) => {\n        const answer = decodeString(questionItem.correct_answer)// correct answers\n        const options = [\n          ...questionItem.incorrect_answers.map(a => decodeString(a)),//incorrect + correct answers\n          answer\n        ]\n        return {\n          id: `${index}-${Date.now()}`,//ensures uniqueness\n          question: decodeString(questionItem.question),\n          answer: answer,\n          options: options.sort(() => Math.random() - .5)//randomizes the options \n        }\n      }))\n    })\n  }\n\n  return (\n    <>\n    {/*create header */}\n      <form className=\"header\" onSubmit={handleSubmit}>\n        <div className=\"form-group\">{/*wrap form elements */}\n          <label htmlFor=\"category\">Subject</label>\n          {/*subject dropdown menu */}\n          <select id=\"category\" ref={category_}>\n            {categories.map(category => {\n              return <option value={category.id} key={category.id}>{category.name}</option>\n            })}\n          </select>\n        </div>\n        <div className=\"form-group\">\n          {/*Questions Counter */}\n          <label htmlFor=\"amount\">Number of Questions</label>\n          <input type=\"number\" id=\"amount\" min=\"1\" step=\"1\" defaultValue={10} ref={amount_} />{/*min amount of 1 default 10 cards on screen */}\n        </div>\n        <div className=\"form-group\">\n          {/*Generate Button*/}\n          <button className=\"btn\">Generate</button>\n        </div>\n      </form>\n          <div className=\"container\">{/* page formatting */}\n        <CardList cards={cards} />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}